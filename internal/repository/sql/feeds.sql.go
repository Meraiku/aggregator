// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feeds.sql

package sql

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one

INSERT INTO feeds (id, name, url, user_id, created_at, updated_at) 
    VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, url, user_id
`

type CreateFeedParams struct {
	ID        uuid.UUID
	Name      string
	Url       string
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

type CreateFeedRow struct {
	ID     uuid.UUID
	Name   string
	Url    string
	UserID uuid.UUID
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (CreateFeedRow, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateFeedRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getAllFeeds = `-- name: GetAllFeeds :many

SELECT  feeds.name AS feed_name, 
        feeds.url, 
        users.name AS user_name
FROM feeds
INNER JOIN users
ON feeds.user_id=users.id
`

type GetAllFeedsRow struct {
	FeedName string
	Url      string
	UserName string
}

func (q *Queries) GetAllFeeds(ctx context.Context) ([]GetAllFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFeedsRow
	for rows.Next() {
		var i GetAllFeedsRow
		if err := rows.Scan(&i.FeedName, &i.Url, &i.UserName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedIDByURL = `-- name: GetFeedIDByURL :one

SELECT id FROM feeds
WHERE url = $1
`

func (q *Queries) GetFeedIDByURL(ctx context.Context, url string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getFeedIDByURL, url)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
